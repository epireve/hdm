{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(ls:*)",
      "WebFetch(domain:arxiv.org)",
      "WebFetch(domain:arxiv.org)",
      "WebFetch(domain:ieeexplore.ieee.org)",
      "WebFetch(domain:arxiv.org)",
      "WebFetch(domain:dl.acm.org)",
      "WebFetch(domain:www.computer.org)",
      "WebFetch(domain:www.mdpi.com)",
      "WebFetch(domain:aclanthology.org)",
      "WebFetch(domain:formative.jmir.org)",
      "WebFetch(domain:www.ijcai.org)",
      "WebFetch(domain:www.tomkenter.nl)",
      "Bash(claude mcp add:*)",
      "Bash(claude mcp:*)",
      "Bash(curl:*)",
      "Bash(grep:*)",
      "Bash(mv:*)",
      "WebFetch(domain:bmcbioinformatics.biomedcentral.com)",
      "WebFetch(domain:www.hindawi.com)",
      "WebFetch(domain:pmc.ncbi.nlm.nih.gov)",
      "WebFetch(domain:bmjopen.bmj.com)",
      "WebFetch(domain:iopscience.iop.org)",
      "WebFetch(domain:www.ncbi.nlm.nih.gov)",
      "Bash(true)",
      "WebFetch(domain:biorxiv.org)",
      "WebFetch(domain:www.biorxiv.org)",
      "WebFetch(domain:www.medrxiv.org)",
      "WebFetch(domain:academic.oup.com)",
      "Bash(mkdir:*)",
      "Bash(cat:*)",
      "WebFetch(domain:www.researchgate.net)",
      "WebFetch(domain:journals.sagepub.com)",
      "WebFetch(domain:www.csc.ncsu.edu)",
      "WebFetch(domain:www.e3s-conferences.org)",
      "WebFetch(domain:dbgroup.ncsu.edu)",
      "WebFetch(domain:onlinelibrary.wiley.com)",
      "WebFetch(domain:wires.onlinelibrary.wiley.com)",
      "WebFetch(domain:www.oaepublish.com)",
      "Bash(rm:*)",
      "WebFetch(domain:espace.library.uq.edu.au)",
      "WebFetch(domain:www.csd.uwo.ca)",
      "Bash(wget:*)",
      "WebFetch(domain:sparql-anything.cc)",
      "WebFetch(domain:www.frontiersin.org)",
      "WebFetch(domain:cs.ndsu.edu)",
      "WebFetch(domain:cs.ndsu.nodak.edu)",
      "WebFetch(domain:oro.open.ac.uk)",
      "Bash(pdftotext:*)",
      "Bash(jq:*)",
      "Bash(claude list-servers)",
      "Bash(claude --list-servers)",
      "Bash(claude servers)",
      "Bash(pkill:*)",
      "Bash(claude --restart-servers)",
      "mcp__puppeteer__puppeteer_navigate",
      "mcp__puppeteer__puppeteer_screenshot",
      "mcp__puppeteer__puppeteer_evaluate",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(cp:*)",
      "Bash(python:*)",
      "WebFetch(domain:core.ac.uk)",
      "mcp__sequential-thinking__sequentialthinking",
      "WebFetch(domain:www.sciencedirect.com)",
      "Bash(claude mcp add sci-hub-mcp-server npx -- -y \"@smithery/cli@latest\" run \"@JackKuo666/sci-hub-mcp-server\" --key \"cc296018-66f4-4825-870c-5038702af3ce\")",
      "WebFetch(domain:doi.org)",
      "WebFetch(domain:ejournal.unia.ac.id)",
      "WebFetch(domain:onepetro.org)",
      "WebFetch(domain:www.semanticscholar.org)",
      "Bash(sed:*)",
      "WebFetch(domain:www.vldb.org)",
      "WebFetch(domain:www.media.mit.edu)",
      "WebFetch(domain:www2024.thewebconf.org)",
      "WebFetch(domain:openreview.net)",
      "WebFetch(domain:smashlab.io)",
      "Bash(for file in personalai_digital_twins_graph_2025.pdf zep_temporal_kg_agent_memory_2025.pdf arigraph_kg_world_models_episodic_memory_2024.pdf privacy_preserving_synthetic_kg_2024.pdf kg_human_memory_systems_pomdp_2024.pdf timelinekgqa_comprehensive_qa_generator_2025.pdf)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(head:*)",
      "Bash(echo)",
      "Bash(done)",
      "WebFetch(domain:www.synergylabs.org)",
      "Bash(rg:*)",
      "WebFetch(domain:journalofbigdata.springeropen.com)",
      "WebFetch(domain:vldb.org)",
      "WebFetch(domain:link.springer.com)",
      "WebFetch(domain:ebooks.iospress.nl)",
      "WebFetch(domain:kdd2024.kdd.org)",
      "WebFetch(domain:pubsonline.informs.org)",
      "WebFetch(domain:direct.mit.edu)",
      "WebFetch(domain:www.usenix.org)",
      "WebFetch(domain:thegraph.com)",
      "WebFetch(domain:cikm2024.org)",
      "WebFetch(domain:uobevents.eventsair.com)",
      "WebFetch(domain:iswc.umbc.edu)",
      "WebFetch(domain:ebiquity.umbc.edu)",
      "WebFetch(domain:iswc2023.semanticweb.org)",
      "WebFetch(domain:2024.eswc-conferences.org)",
      "WebFetch(domain:2023.eswc-conferences.org)",
      "WebFetch(domain:pubmed.ncbi.nlm.nih.gov)",
      "WebFetch(domain:www.nature.com)",
      "WebFetch(domain:ojs.aaai.org)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:proceedings.mlr.press)",
      "WebFetch(domain:ceur-ws.org)",
      "WebFetch(domain:hal.science)",
      "WebFetch(domain:2025.sigmod.org)",
      "WebFetch(domain:journalofcloudcomputing.springeropen.com)",
      "WebFetch(domain:www.arxiv.org)",
      "Bash(awk:*)",
      "WebFetch(domain:ai.jmir.org)",
      "Bash(claude --list-mcps)",
      "Bash(claude --version)",
      "Bash(node:*)",
      "Bash(timeout 10s npx @modelcontextprotocol/server-brave-search --help)",
      "Bash(npx @modelcontextprotocol/server-brave-search:*)",
      "Bash(gtimeout:*)",
      "Bash(env)",
      "Bash(npx @modelcontextprotocol/server-filesystem:*)",
      "Bash(npx @modelcontextprotocol/server-fetch:*)",
      "Bash(npx @modelcontextprotocol/server-memory:*)",
      "Bash(npx:*)",
      "Bash(npm search:*)",
      "WebFetch(domain:api.search.brave.com)",
      "Bash(pip install:*)",
      "Bash(pip3 install:*)",
      "Bash(chmod:*)",
      "Bash(source:*)",
      "Bash(./test_conversion.sh:*)",
      "Bash(marker:*)",
      "Bash(./venv/bin/python -m pip list:*)",
      "Bash(./venv/bin/marker:*)",
      "Bash(./venv/bin/python:*)",
      "Bash(./venv/bin/pip install python-dotenv)",
      "Bash(if [ -f phase1_checkpoint.json ])",
      "Bash(then echo \"Checkpoint exists\")",
      "Bash(else echo \"No checkpoint yet\")",
      "Bash(fi)",
      "Bash(GOOGLE_API_KEY=$GEMINI_API_KEYS ./venv/bin/marker test_marker_input --output_dir test_marker_output --max_files 1 2 >& 1)",
      "Bash(./venv/bin/pip show marker-pdf)",
      "Bash(./convert_batch.sh:*)",
      "Bash(bash:*)",
      "Bash(timeout 30 python scripts/phase2/research_table_updater.py)",
      "Bash(PHASE2_TEST_MODE=false python paper_analyzer_csv.py)",
      "Bash(PHASE2_TEST_MODE=false python scripts/phase2/paper_analyzer_csv.py 2 >& 1)",
      "Bash(PHASE2_TEST_MODE=false python scripts/phase2/markdown_standardizer_csv.py 2 >& 1)",
      "Bash(PHASE2_TEST_MODE=false python scripts/phase2/metadata_integrator_csv.py 2 >& 1)",
      "Bash(./monitor_image_description.sh:*)",
      "Bash(export PIP_REQUIRE_VIRTUALENV=false)",
      "Bash(.venv/bin/python:*)",
      "Bash(.venv/bin/pip:*)",
      "Bash(/Users/invoture/dev.local/hdm/.venv/bin/python /Users/invoture/dev.local/hdm/update_keywords.py)",
      "Bash(./robust_keyword_updater.py)",
      "Bash(cut:*)",
      "Bash(comm:*)",
      "Bash(for:*)",
      "Bash(do)",
      "Bash(if [ -d \"/Users/invoture/dev.local/hdm/markdown_papers/$folder\" ])",
      "Bash(then)",
      "Bash(echo:*)",
      "Bash(./batch_convert_new_papers.sh:*)",
      "Bash(GOOGLE_API_KEY=AIzaSyB9aG02aCCHHEGd81ZA_q03Xl_Z1rUIF4Q python image_descriptor.py --paper_dir ../../markdown_papers/li_2022)",
      "Bash(GOOGLE_API_KEY=AIzaSyB9aG02aCCHHEGd81ZA_q03Xl_Z1rUIF4Q python scripts/phase2/image_descriptor.py --paper_dir markdown_papers/li_2022)",
      "Bash(test:*)",
      "Bash(# Rename the files with standardized naming convention\n# Format: hdm_research_papers_[type]_[date].csv\n\n# Get today's date\nDATE=$(date +%Y%m%d)\n\n# Rename the complete dataset\nmv research_papers_complete_FINAL_normalized_tags.csv hdm_research_papers_complete_${DATE}.csv\n\n# Rename the merged dataset (with PKG data)\nmv research_papers_merged_final_normalized_tags.csv hdm_research_papers_merged_${DATE}.csv\n\n# List the renamed files\nls -la hdm_research_papers_*.csv)",
      "Bash(../../venv/bin/python process_hdm_data.py:*)",
      "Bash(../../venv/bin/python:*)",
      "Bash(venv/bin/python:*)",
      "Bash(kill:*)",
      "Bash(./scripts/run_standardization.sh:*)",
      "Bash(do echo \"=== Batch $i ===\")",
      "Bash(git push:*)",
      "Bash(git revert:*)",
      "Bash(./scripts/continuous_processor.sh:*)",
      "Bash(while true)",
      "Bash(do echo \"ðŸ”„ Running batch...\")",
      "Bash(do echo \"ðŸ”„ Running batch $i...\")",
      "Bash(timeout 120 python3 scripts/batch_process_large_papers.py)",
      "Bash(ps:*)",
      "Bash(__NEW_LINE__ echo -e \"\\n2. alatrash_2024:\")",
      "Bash(__NEW_LINE__ echo -e \"\\n3. majerus_2009:\")",
      "Bash(__NEW_LINE__ echo -e \"\\n4. paperbased_2021:\")",
      "Bash(tree:*)",
      "mcp__puppeteer__puppeteer_click",
      "mcp__puppeteer__puppeteer_select",
      "Bash(npm install:*)",
      "Bash(# Move redundant standardization scripts\nmv scripts/standardize_papers_batch_large.py archive/legacy_scripts/standardization/\nmv scripts/standardize_all_papers_concurrent.py archive/legacy_scripts/standardization/\nmv scripts/paper_standardizer_minimal.py archive/legacy_scripts/standardization/\nmv scripts/standardize_papers_batch.py archive/legacy_scripts/standardization/\nmv scripts/paper_md_standardizer_simple.py archive/legacy_scripts/standardization/\n\necho \"Moved standardization scripts to archive\")",
      "Bash(# Move redundant merge scripts\nmv scripts/processing/final_merge.py archive/legacy_scripts/merge_operations/\nmv scripts/processing/compare_and_merge_csvs.py archive/legacy_scripts/merge_operations/\nmv scripts/processing/merge_datasets_final.py archive/legacy_scripts/merge_operations/\nmv scripts/processing/verify_merge.py archive/legacy_scripts/merge_operations/\n\necho \"Moved merge scripts to archive\")",
      "Bash(# Move experimental phase2 scripts\nmv scripts/phase2/markdown_standardizer.py archive/legacy_scripts/phase2_experiments/\n\necho \"Moved phase2 experimental scripts to archive\")",
      "Bash(.venv/bin/mypy scripts/refactored/core/ --ignore-missing-imports)",
      "Bash(.venv/bin/mypy scripts/refactored/processors/ --ignore-missing-imports)",
      "Bash(.venv/bin/mypy scripts/refactored/pipelines/ --ignore-missing-imports)",
      "Bash(.venv/bin/mypy scripts/refactored/ --config-file mypy.ini)",
      "Bash(.venv/bin/pytest tests/unit/test_config.py -v)",
      "Bash(.venv/bin/pytest tests/unit/test_config.py::TestConfig::test_default_config_creation -v)",
      "Bash(/usr/local/bin/python3 -m pip install:*)",
      "Bash(pip --version)",
      "Bash(unset:*)",
      "Bash(./test_env/bin/python:*)",
      "Bash(VIRTUAL_ENV=/Users/invoture/dev.local/hdm/test_env PATH=/Users/invoture/dev.local/hdm/test_env/bin:$PATH python scripts/paper_reformatter_test.py markdown_papers/abdallah_2021/paper.md --output-dir test_reformatted_final)",
      "Bash(VIRTUAL_ENV=test_env PATH=test_env/bin:$PATH python scripts/paper_reformatter_test.py markdown_papers/abdallah_2021/paper.md --output-dir test_reformatted_final)",
      "Bash(time:*)",
      "Bash(git checkout:*)",
      "Bash(git reset:*)",
      "Bash(sqlite3:*)",
      "Bash(touch:*)"
    ],
    "deny": []
  }
}